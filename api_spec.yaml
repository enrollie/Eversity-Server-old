openapi: 3.0.0
info:
  title: "Eversity Server"
  description: "API documentation, which is the main way of interacting with Eversity"
  version: 0.0.1
servers:
  - url: '{server}/api'
    description: "Current server"
    variables:
      server:
        default: http://127.0.0.1:8080
  - url: 'http://eversity-public.neitex.me/api'
    description: Public Eversity test server. Subdomain URL variable is set to "https://191minsk.schools.by/"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorData:
      title: Additional information of error
      description: >
        Additional information of error, made to make better understanding of what happened and actions, that server did.
      type: object
      properties:
        errorCode:
          type: string
          description: Name of error
          example: INVALID_COOKIES
        action:
          type: string
          description: Actions that server done. Usually client should to the same.
          example: INVALIDATE_ALL_TOKENS
    LoginData:
      title: Data, used to login into Eversity.
      type: object
      properties:
        username:
          type: string
          description: Schools.by username (username, used to log in into Schools.by)
        password:
          type: string
          description: Schools.by password (password, used to log in into Schools.by)
          format: password
    LessonTimeConstraints:
      title: Times of start and end of lesson
      type: object
      properties:
        startH:
          type: integer
          description: Start hour of lesson
          example: 9
        startM:
          type: integer
          description: Start minute of lesson
          example: 0
        endH:
          type: integer
          description: End hour of lesson
          example: 9
        endM:
          type: integer
          description: End minute of lesson
          example: 45
    PupilLesson:
      title: Lesson of pupil
      type: object
      properties:
        place:
          type: integer
          description: Place of lesson in timetable
          example: 2
        title:
          type: string
          description: Full title of lesson
          example: Физическая культура и здоровье
        schedule:
          $ref: '#/components/schemas/LessonTimeConstraints'
    TeacherLesson:
      title: Lesson of teacher
      type: object
      description: PupilLesson schema extended with 'classID' property, which contains class ID, who teacher is teaching lesson to
      properties:
        place:
          type: integer
          description: Place of lesson in timetable
          example: 2
        title:
          type: string
          description: Full title of lesson
          example: Физическая культура и здоровье
        schedule:
          $ref: '#/components/schemas/LessonTimeConstraints'
        classID:
          type: integer
          description: Class ID, who teacher is teaching lesson to.
          example: 12345
    Timetable:
      title: Timetable
      description: Timetable contains days in form of map. All of elements are either PupilLesson, either TeacherLesson (all of elements are of the same type).
      type: object
      properties:
        MONDAY:
          description: Timetable of monday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'
        TUESDAY:
          description: Timetable of tuesday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'
        WEDNESDAY:
          description: Timetable of wednesday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'
        THURSDAY:
          description: Timetable of thursday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'
        FRIDAY:
          description: Timetable of friday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'
        SATURDAY:
          description: Timetable of saturday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'

    BasicUserData:
      title: User data retrieved from /user/{id}
      type: object
      properties:
        id:
          type: integer
          description: User's Schools.by ID (same as Eversity ID)
        type:
          type: string
          description: Type of user (corelates with Schools.by user type, but some of types are not present in Schools.by)
        firstName:
          type: string
          description: User's first name
        middleName:
          type: string
          nullable: true
          description: User's middle name (father's name) if present
        lastName:
          type: string
          description: User's last name
        timetable:
          $ref: '#/components/schemas/Timetable'
tags:
  - name: Authentication
    description: Everything about authentication
  - name: User data
    description: Everything about getting and updating user data
paths:
  /auth/login:
    post:
      summary: "Login user"
      description: >
        Logs user into it's Schools.by account and (if user is not registered already) downloads all of needed data.
        Returns JWT token, that contains user ID and Eversity token (used to authenticate user).\

        ***WARNING: Because of communicating with Schools.by and parsing all of it's data, response time may be very long (in testing environment: ~13 secs). Recommended timeout: 20 seconds (server may be installed on old hardware with bad internet access).***
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginData"
      responses:
        '200':
          description: Everything went good.
          content:
            text/plain:
              schema:
                type: string
                description: >
                  JWT access token.\

                  (note: Given JWT access token example is not valid because of invalid signature.)
                example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJFbnJvbGxpZS9FdmVyc2l0eUpXVCIsImlzcyI6IkVucm9sbGllLUV2ZXJzaXR5SldUIiwidXNlcklEIjoiMTIzNDU2IiwidG9rZW4iOiI1OTViMzRjOC1kYWFkLTQ5YTctYjY1ZS1hMzgxNTYwNTllNzUifQ.h59A1gXGWJ471RC17nzY5heODKF-EVC89EvmBsrW-OA
        '401':
          description: Schools.by rejected username or password
        '400':
          description: JSON deserialization failed. It usually indicates that JSON is malformed.
  /auth/invalidate/all:
    post:
      summary: "Invalidates  user tokens"
      description: >
        Invalidates *(bans)* **ALL** user Eversity access tokens based on request authentication token (does not do anything to data in Schools.by). Basically, logs user out of all clients.
      tags:
        - Authentication
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: All Eversity access tokens were banned and invalidated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  removed_tokens:
                    type: integer
                    example: 21
        '401':
          description: Authentication failed. JWT token was not approved by checker. Usually indicates that Authorization header is not valid.
  /auth/invalidate/current:
    post:
      summary: "Invalidates used token"
      description: >
        Invalidates token that was supplied with request. Basically, logs user out of given session.
      tags:
        - Authentication
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: >
            Token was successfully invalidated.\

            After receiving this response, token that was supplied with request cannot be reused and **should be discarded immediately**
        '401':
          description: Authentication failed. JWT token was not approved by checker. Usually indicates that Authorization header is not valid.
  /user/{id}:
    get:
      summary: Fetches user data (name, type and timetable)
      description: >
        Fetches user data and returns it in JSON format
      tags:
        - User data
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Everything went good
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicUserData'
        '404':
          description: User with given ID was not found
    post:
      summary: Updates user data
      tags:
        - User data
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      security:
          - BearerAuth: [ ]
      responses:
        '200':
          description: Everything went good
        '404':
          description: User with given ID was not found
        '412':
          description: >
            Cookies of requested user were invalid, thus action failed. If requested user is the same user, who authenticated,
            **all** of Eversity access tokens are invalidated and client should log user out with message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'