openapi: 3.0.1
info:
  title: "Eversity Server"
  description: "API documentation, which is the main way of interacting with Eversity"
  version: 0.1.0
servers:
  - url: '{server}/api'
    description: "Current server"
    variables:
      server:
        default: http://127.0.0.1:8080
  - url: 'https://eversity-public.neitex.me/api'
    description: Public Eversity test server. Subdomain URL variable is set to "https://191minsk.schools.by/"
  - url: 'https://neitex.me/eversity_api/'
    description: Same server as 'https://eversity-public.neitex.me/api'. Subdomain URL variable is set to "https://191minsk.schools.by/"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorData:
      title: Additional information of error
      description: >
        Additional information of error, made to make better understanding of what happened and actions, that server did.
      type: object
      properties:
        errorCode:
          type: string
          description: Name of error
          example: INVALID_COOKIES
        action:
          type: string
          description: Actions that server done. Usually client should to the same.
          example: INVALIDATE_ALL_TOKENS
    AbsenceType:
      title: Type of pupil absence reason
      type: string
      enum:
        - ILLNESS
        - HEALING
        - REQUEST
        - COMPETITION
        - UNKNOWN
    AbsenceStatistics:
      type: object
      description: Count of pupils absent for coresponding reason
      properties:
        ILLNESS:
          type: integer
        HEALING:
          type: integer
        REQUEST:
          type: integer
        COMPETITION:
          type: integer
        UNKNOWN:
          type: integer
    AbsencePlacementJob:
      type: object
      description: Requset for Eversity to place absence for pupil
      properties:
        pupilID:
          type: integer
          description: ID of pupil. Can be -1, if all pupils in class attended school
        classID:
          type: integer
          description: Pupils's class ID
        absenceList:
          type: array
          items:
            properties:
              first:
                type: integer
                description: Numeric place of lesson
              second:
                type: boolean
                description: Is pupil absent on this lesson
        reason:
          $ref: '#/components/schemas/AbsenceReason'
        date:
          type: string
          format: date
          description: Date of absence
    ClassData:
      title: Data of school class
      type: object
      properties:
        id:
          type: integer
          description: ID of class
        title:
          type: string
          description: Title of class
          example: "9 \"В\""
        classTeacherID:
          type: integer
          description: ID of class teacher
        pupils:
          type: array
          items:
            $ref: '#/components/schemas/PupilData'
    PupilData:
      description: Data of pupil
      type: object
      properties:
        id:
          type: integer
          description: ID of pupil
        firstName:
          type: string
          description: Pupil's first name
        lastName:
          type: string
          description: Pupil's last name
        classID:
          type: integer
          description: ID of class, that pupil relates to
    LoginData:
      title: Data, used to login into Eversity.
      type: object
      properties:
        username:
          type: string
          description: Schools.by username (username, used to log in into Schools.by)
        password:
          type: string
          description: Schools.by password (password, used to log in into Schools.by)
          format: password
    LessonTimeConstraints:
      title: Times of start and end of lesson
      type: object
      properties:
        startH:
          type: integer
          description: Start hour of lesson
          example: 9
        startM:
          type: integer
          description: Start minute of lesson
          example: 0
        endH:
          type: integer
          description: End hour of lesson
          example: 9
        endM:
          type: integer
          description: End minute of lesson
          example: 45
    PupilLesson:
      title: Lesson of pupil
      type: object
      properties:
        place:
          type: integer
          description: Place of lesson in timetable
          example: 2
        title:
          type: string
          description: Full title of lesson
          example: Физическая культура и здоровье
        schedule:
          $ref: '#/components/schemas/LessonTimeConstraints'
    TeacherLesson:
      title: Lesson of teacher
      type: object
      description: PupilLesson schema extended with 'classID' property, which contains class ID, who teacher is teaching lesson to
      properties:
        place:
          type: integer
          description: Place of lesson in timetable
          example: 2
        title:
          type: string
          description: Full title of lesson
          example: Физическая культура и здоровье
        schedule:
          $ref: '#/components/schemas/LessonTimeConstraints'
        classID:
          type: integer
          description: Class ID, who teacher is teaching lesson to.
          example: 12345
    Timetable:
      title: Timetable
      description: Timetable contains days in form of map. All of elements are either PupilLesson, either TeacherLesson (all of elements are of the same type).
      type: object
      properties:
        MONDAY:
          description: Timetable of monday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'
        TUESDAY:
          description: Timetable of tuesday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'
        WEDNESDAY:
          description: Timetable of wednesday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'
        THURSDAY:
          description: Timetable of thursday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'
        FRIDAY:
          description: Timetable of friday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'
        SATURDAY:
          description: Timetable of saturday
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PupilLesson'
              - $ref: '#/components/schemas/TeacherLesson'
    BasicUserData:
      title: User data retrieved from /user/{id}
      type: object
      properties:
        id:
          type: integer
          description: User's Schools.by ID (same as Eversity ID)
        type:
          type: string
          description: Type of user (corelates with Schools.by user type, but some of types are not present in Schools.by)
        firstName:
          type: string
          description: User's first name
        middleName:
          type: string
          nullable: true
          description: User's middle name (father's name) if present
        lastName:
          type: string
          description: User's last name
    AbsenceReason:
      title: Reason of absence
      description: >
        ILLNESS is used when pupil is ill;
        HEALING is used when pupil is in sanatorium;
        REQUEST is used when pupil is absent on request of parents;
        COMPETITION is used when pupil is on any kind of competition (i.e. volleyball tournament);
        UNKNOWN is used when pupil is absent for unknown reason (or pupil has bad excuse for absence)
      type: string
      enum:
        - ILLNESS
        - HEALING
        - REQUEST
        - COMPETITION
        - UNKNOWN
    AbsenceData:
      title: Data for absence of one pupil
      type: object
      properties:
        pupilID:
          type: integer
          description: ID of absent pupil
        classID:
          type: integer
          description: Absent pupil class ID
        date:
          type: string
          description: Date of absence (in YYYY-MM-dd format)
        reason:
          $ref: '#/components/schemas/AbsenceReason'


tags:
  - name: Authentication
    description: Everything about authentication
  - name: User data
    description: Everything about getting and updating user data
  - name: Class data
    description: Everything about classes and data about them
  - name: Absence
    description: Everuthing about absences
  - name: Technical
    description: Everything about server status, system data, etc.
paths:
  /auth/login:
    post:
      summary: "Login user"
      description: >
        Logs user into it's Schools.by account and (if user is not registered already) downloads all of needed data.
        Returns JWT token, that contains user ID and Eversity token (used to authenticate user).\

        ***WARNING: Because of communicating with Schools.by and parsing all of it's data, response time may be very long (in testing environment: ~3 secs). Recommended timeout: 8 seconds (server may be installed on old hardware with bad internet access).***
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginData"
      responses:
        '200':
          description: Everything went good.
          content:
            text/plain:
              schema:
                type: string
                description: >
                  JWT access token.\

                  (note: Given JWT access token example is not valid because of invalid signature.)
                example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJFbnJvbGxpZS9FdmVyc2l0eUpXVCIsImlzcyI6IkVucm9sbGllLUV2ZXJzaXR5SldUIiwidXNlcklEIjoiMTIzNDU2IiwidG9rZW4iOiI1OTViMzRjOC1kYWFkLTQ5YTctYjY1ZS1hMzgxNTYwNTllNzUifQ.h59A1gXGWJ471RC17nzY5heODKF-EVC89EvmBsrW-OA
        '401':
          description: Schools.by rejected username or password
        '400':
          description: JSON deserialization failed. It usually indicates that JSON is malformed.
        '424':
          description: Schools.by is not available at the moment, so server cannot check user credentials. Notifying user is very recommended.
  /auth/invalidate/all:
    post:
      summary: "Invalidates  user tokens"
      description: >
        Invalidates *(bans)* **ALL** user Eversity access tokens based on request authentication token (does not do anything to data in Schools.by). Basically, logs user out of all clients.
      tags:
        - Authentication
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: All Eversity access tokens were banned and invalidated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  removed_tokens:
                    type: integer
                    example: 21
        '401':
          description: Authentication failed. JWT token was not approved by checker. Usually indicates that Authorization header is not valid.
  /auth/invalidate/current:
    post:
      summary: "Invalidates used token"
      description: >
        Invalidates token that was supplied with request. Basically, logs user out of given session.
      tags:
        - Authentication
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: >
            Token was successfully invalidated.\

            After receiving this response, token that was supplied with request cannot be reused and **should be discarded immediately**
        '401':
          description: Authentication failed. JWT token was not approved by checker. Usually indicates that Authorization header is not valid.
  /user/{id}:
    get:
      summary: Fetches user data (name and type)
      description: >
        Fetches user data and returns it in JSON format
      tags:
        - User data
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Everything went good
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicUserData'
        '404':
          description: User with given ID was not found
    post:
      summary: Updates user data
      tags:
        - User data
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Everything went good
        '404':
          description: User with given ID was not found
        '412':
          description: >
            Cookies of requested user were invalid, thus action failed. If requested user is the same user, who authenticated,
            **all** of Eversity access tokens are invalidated and client should log user out with message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
  /class/{id}:
    get:
      summary: Fetches class data
      tags:
        - Class data
      parameters:
        - name: id
          in: path
          description: Class ID
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Everything went good
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassData'
        '404':
          description: Class with given ID was not found
        '400':
          description: Class ID is missing or malformed
  /class/{id}/pupils:
    get:
      summary: Fetches pupils list
      tags:
        - Class data
      parameters:
        - name: id
          in: path
          description: Class ID
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Everything went good
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PupilData'
        '404':
          description: Class with given ID was not found
        '400':
          description: Class ID is missing or malformed
  /class/{id}/absence:
    get:
      summary: Fetches class absence for current day
      tags:
        - Class data
        - Absence
      parameters:
        - name: id
          in: path
          description: Class ID
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Everything went good
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AbsenceData'
        '404':
          description: Class with given ID was not found
        '400':
          description: Class ID is missing or malformed
  /class/{id}/absence/day/{date}:
    get:
      summary: Fetches class absence for given date
      tags:
        - Class data
        - Absence
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Class ID
          required: true
          schema:
            type: integer
        - name: date
          in: path
          description: Date of day in YYYY-MM-dd format
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Everything went good
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AbsenceData'
        '404':
          description: Class with given ID was not found
        '400':
          description: Class ID or date is missing or malformed
  /class/{id}/absence/week/{date}:
    get:
      summary: Fetches class absence for given week
      description: Fetches all absences in the week in which the given date is located
      tags:
        - Class data
        - Absence
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Class ID
          required: true
          schema:
            type: integer
        - name: date
          in: path
          description: Date of day in YYYY-MM-dd format
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Everything went good
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AbsenceData'
        '404':
          description: Class with given ID was not found
        '400':
          description: Class ID or date is missing or malformed
  /absence/statistics:
    get:
      summary: Retrieves statistics for current moment
      description: Retrieves statistics for request time. It may not be full nor accurate.
      tags:
        - Absence
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Everything went good and statistics were acquired
          content:
            application/json:
              schema:
                type: object
                properties:
                  pupilCount:
                    type: object
                    properties:
                      first:
                        type: integer
                        description: First shift pupil count
                      second:
                        type: integer
                        description: Second shift pupil cound
                  absenceStatistics:
                    type: object
                    description: Pair of absence statistics for first and second shift respectively
                    properties:
                      first:
                        $ref: '#/components/schemas/AbsenceStatistics'
                      second:
                        $ref: '#/components/schemas/AbsenceStatistics'
  /absence/statistics/day/{date}:
    get:
      summary: Retrieves statistics for given date
      description: Retrieves statistics for given date. You may request data for future, but it won't be filled by anything but zeroes. Requires Social user type.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: date
          in: path
          description: Date of day in YYYY-MM-dd format
          required: true
          schema:
            type: string
            format: date
      tags:
        - Absence
      responses:
        '200':
          description: Everything went good and statistics were acquired
          content:
            application/json:
              schema:
                type: object
                properties:
                  pupilCount:
                    type: object
                    properties:
                      first:
                        type: integer
                        description: First shift pupil count
                      second:
                        type: integer
                        description: Second shift pupil cound
                  absenceStatistics:
                    type: object
                    description: Pair of absence statistics for first and second shift respectively
                    properties:
                      first:
                        $ref: '#/components/schemas/AbsenceStatistics'
                      second:
                        $ref: '#/components/schemas/AbsenceStatistics'
  /absence/class/{id}:
    post:
      summary: Posts absence placement job
      description: >
        Posts absence placement job. Requires user type to be TEACHER type (tbd) with valid cookies.
        Returns job ID (if only one job were posted) or job group ID (if more than one job were posted).
        API for checking their statuses will be present in next API version.
        ***Because of checking user's credentials before adding job to queue, response time may be more than 2 seconds.
        In testing environment it was ~2.5 seconds***
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of class. Must be same, as all placement jobs
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbsencePlacementJob"
      tags:
        - Absence
      responses:
        '200':
          description: Everything went good and job was registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - single
                      - group
        '400':
          description: Server rejected job placement post. Most likely, user does not have permission to access this class
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
  /absence/statistics/ready:
    get:
      summary: Checks, if all of registered classes sent absence data
      description: Required user type - Social teacher
      tags:
        - Absence
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Everything went good and data was retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  isReady:
                    type: boolean
                    description: Describes, if all classes sent over absence data
                  noData:
                    type: array
                    description: Array of classes, that did not sent over absence data. If "isReady" equals true, array is empty
                    items:
                      type: object
                      properties:
                        classID:
                          type: integer
                          description: ID of class
                        className:
                          type: string
                          description: Public name of class
                          example: 9 "В"
                        isSecondShift:
                          type: boolean
                          description: Describes, if this class is second shift class or not (true, if it is second shift class)
  /absence/statistics/fill:
    get:
      summary: Fills absence statistics template
      description: Fills .docx absence statistics template. Requires Social user type. Template is selected by system administrator. First filling from server start takes ~5 seconds to fill.
      tags:
        - Absence
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Statistics template was filled
          content:
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
        '400':
          description: User's type is not Social
  /absence/statistics/fill/{date}:
    get:
      summary: Fills absence statistics template for given date
      description: Fills .docx absence statistics template. Requires Social user type. Template is selected by system administrator. First filling from server start takes ~5 seconds to fill.
      tags:
        - Absence
      security:
        - BearerAuth: [ ]
      parameters:
        - name: date
          in: path
          description: Date of day in YYYY-MM-dd format
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Statistics template was filled
          content:
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
        '400':
          description: User's type is not Social
  /ping:
    get:
      summary: Used to check if server is online
      description: "Does not require authentication. Typical usage: check, if Eversity API is online."
      tags:
        - Technical
      responses:
        '200':
          description: Server is online and capable of serving requests
          content:
            text/plain:
              schema:
                type: string
                example: Pong!